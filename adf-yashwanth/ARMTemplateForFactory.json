{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-yashwanth"
		},
		"ls_adlsgen2_formulaonedll_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_adlsgen2_formulaonedll'"
		},
		"ls_ncplbootcampyash_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_ncplbootcampyash'"
		},
		"ls_test_laptop_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_test_laptop'"
		},
		"ls_adlsgen2_formulaonedll_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://formulaonedll.dfs.core.windows.net/"
		},
		"ls_akvyashwanth_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://akvyashwanth.vault.azure.net/"
		},
		"ls_databricks_yashwanth_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0402-165019-it2gf5it"
		},
		"ls_laptop_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Users\\Yashwanth\\Desktop\\Ncpl Azure\\Bootcamp\\Project_1\\Data"
		},
		"ls_laptop_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "yashwanthchalla55@gmail.com"
		},
		"ls_ncplbootcampyash_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ncplbootcampyash.dfs.core.windows.net/"
		},
		"ls_server_db_azuresql_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "server-db-azuresql.database.windows.net"
		},
		"ls_server_db_azuresql_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "db-azuresql"
		},
		"ls_server_db_azuresql_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladminuser"
		},
		"ls_test_laptop_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Users\\Yashwanth\\Downloads"
		},
		"ls_test_laptop_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "yashwanthchalla55@gmail.com"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_bronze_to_silver_transformations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"description": "transform files in bronze and store in silver",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_bronze_to_silver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"accounts": {},
									"customers": {},
									"loanPayments": {},
									"loans": {},
									"transactions": {},
									"sinkadlsSilverAccounts": {},
									"sinkaldsSilverCustomers": {},
									"sinkAdlsSilverLoanPayments": {},
									"sinkAdlsSilverLoans": {},
									"sinkAdlsSilverTransactions": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"concurrency": 5,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-17T15:07:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_bronze_to_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_from_laptop_to_adls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup",
						"description": "get filenames from source",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ls_src_metadata_json",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach",
						"description": "copy to adls for each src file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup').output.value[0].filenames",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "Copy data",
									"description": "copy data from local to adls",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ls_csv_source_laptop",
											"type": "DatasetReference",
											"parameters": {
												"src_filename": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ls_bronze_csv",
											"type": "DatasetReference",
											"parameters": {
												"sink_foldername": {
													"value": "@split(item(),'.')[0]",
													"type": "Expression"
												},
												"sink_filename": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-16T15:03:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ls_src_metadata_json')]",
				"[concat(variables('factoryId'), '/datasets/ls_csv_source_laptop')]",
				"[concat(variables('factoryId'), '/datasets/ls_bronze_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_master_project01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy to bronze from source",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_copy_from_laptop_to_adls",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze to silver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy to bronze from source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_bronze_to_silver_transformations",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "silver to gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "bronze to silver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_silver_to_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-18T19:51:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_copy_from_laptop_to_adls')]",
				"[concat(variables('factoryId'), '/pipelines/pl_bronze_to_silver_transformations')]",
				"[concat(variables('factoryId'), '/pipelines/pl_silver_to_gold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_silver_to_gold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow scd type1",
						"description": "SCDTYPE 1 for accounts and customers",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_silver_to_gold",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcAccounts": {},
									"targetAccounts": {},
									"srcCustomers": {},
									"targetCustomer": {},
									"sinkAccountsTable": {},
									"sinkAccoountsTableUpdate": {},
									"sinkCustomerInsert": {},
									"sinkCustomerUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Data flow scd type 2",
						"description": "SCD TYPE 2 for loan_payments. loans and transactions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_silver_to_gold_scdtype2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"loanPayments": {},
									"targetLoanPayments": {},
									"loans": {},
									"targetLoans": {},
									"transactions": {},
									"targetTransactions": {},
									"sinkLoanPaymentsUpdate": {},
									"sinkLoanPaymentsInsert": {},
									"sinkUpdateRowsLoans": {},
									"sinkInsertRowsLoans": {},
									"sinkUpdateRowsTransactions": {},
									"sinkInsertRowsTransactions": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-18T17:22:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_silver_to_gold')]",
				"[concat(variables('factoryId'), '/dataflows/df_silver_to_gold_scdtype2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_getmetadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_formulaonedll",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_window_end_date": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@formatDateTime(dataset().p_window_end_date,'yyyy-MM-dd')",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_formulaonedll')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_bronze_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ncplbootcampyash",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sink_foldername": {
						"type": "string"
					},
					"sink_filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().sink_filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().sink_foldername",
							"type": "Expression"
						},
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ncplbootcampyash')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_csv_source_laptop')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_laptop",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"src_filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().src_filename",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_laptop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_src_metadata_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ncplbootcampyash",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "src_filenames_metadata.json",
						"fileSystem": "metadata"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"filenames": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ncplbootcampyash')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adlsgen2_formulaonedll')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adlsgen2_formulaonedll_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_adlsgen2_formulaonedll_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_akvyashwanth')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_akvyashwanth_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_databricks_yashwanth')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-2703617898842728.8.azuredatabricks.net",
					"authentication": "MSI",
					"workspaceResourceId": "/subscriptions/32bb1eef-56f8-4259-b7ae-f7ba9f063ae1/resourceGroups/rg-databricks-yashwanth/providers/Microsoft.Databricks/workspaces/databricks-yashwanth",
					"existingClusterId": "[parameters('ls_databricks_yashwanth_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_laptop')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('ls_laptop_properties_typeProperties_host')]",
					"userId": "[parameters('ls_laptop_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_akvyashwanth",
							"type": "LinkedServiceReference"
						},
						"secretName": "laptop-pw"
					}
				},
				"connectVia": {
					"referenceName": "IR-yash-laptop",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-yash-laptop')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_akvyashwanth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ncplbootcampyash')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_ncplbootcampyash_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_ncplbootcampyash_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_server_db_azuresql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_server_db_azuresql_properties_typeProperties_server')]",
					"database": "[parameters('ls_server_db_azuresql_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_server_db_azuresql_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_akvyashwanth",
							"type": "LinkedServiceReference"
						},
						"secretName": "akv-userpwd-server-db-azuresql"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_akvyashwanth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_test_laptop')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('ls_test_laptop_properties_typeProperties_host')]",
					"userId": "[parameters('ls_test_laptop_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_test_laptop_password')]"
					}
				},
				"connectVia": {
					"referenceName": "IR-yash-laptop",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-yash-laptop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_customer_accounts_analysis')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_master_project01",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-04-20T21:10:00",
						"endTime": "2025-04-22T01:01:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								22
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_master_project01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR-yash-laptop')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_bronze_to_silver')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "accounts"
						},
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "customers"
						},
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "loanPayments"
						},
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "loans"
						},
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "transactions"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "sinkadlsSilverAccounts"
						},
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "sinkaldsSilverCustomers"
						},
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "sinkAdlsSilverLoanPayments"
						},
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "sinkAdlsSilverLoans"
						},
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "sinkAdlsSilverTransactions"
						}
					],
					"transformations": [
						{
							"name": "removeNullsFromAccounts",
							"description": "removenull"
						},
						{
							"name": "upsertAccounts"
						},
						{
							"name": "removeNullsFromCustomers"
						},
						{
							"name": "upsertCustomers"
						},
						{
							"name": "removeNullFromLoanPayments"
						},
						{
							"name": "removeDuplicates"
						},
						{
							"name": "upsertLoanpayments"
						},
						{
							"name": "removeDuplictates"
						},
						{
							"name": "removeDuplicatesFromCustomers"
						},
						{
							"name": "removeNullFromLoans"
						},
						{
							"name": "removeDuplicatesFromLoans"
						},
						{
							"name": "upsertLoans"
						},
						{
							"name": "removeNullFromTransactions"
						},
						{
							"name": "removeDuplicateFromTransactions"
						},
						{
							"name": "upsertTransactions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          account_id as integer,",
						"          customer_id as integer,",
						"          account_type as string,",
						"          balance as double",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'bronze',",
						"     folderPath: 'accounts',",
						"     fileName: 'accounts.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> accounts",
						"source(output(",
						"          customer_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'bronze',",
						"     folderPath: 'customers',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> customers",
						"source(output(",
						"          payment_id as integer,",
						"          loan_id as integer,",
						"          payment_date as date,",
						"          payment_amount as double",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'bronze',",
						"     folderPath: 'loan_payments',",
						"     fileName: 'loan_payments.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> loanPayments",
						"source(output(",
						"          loan_id as integer,",
						"          customer_id as integer,",
						"          loan_amount as double,",
						"          interest_rate as double,",
						"          loan_term as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'bronze',",
						"     folderPath: 'loans',",
						"     fileName: 'loans.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> loans",
						"source(output(",
						"          transaction_id as integer,",
						"          account_id as integer,",
						"          transaction_date as date,",
						"          transaction_amount as double,",
						"          transaction_type as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'bronze',",
						"     folderPath: 'transactions',",
						"     fileName: 'transactions.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> transactions",
						"accounts filter(!isNull(account_id) && !isNull(customer_id) && !isNull(account_type)) ~> removeNullsFromAccounts",
						"removeDuplictates alterRow(upsertIf(true())) ~> upsertAccounts",
						"customers filter(!isNull(customer_id) && !isNull(first_name) && !isNull(last_name) && !isNull(address) && !isNull(city) && !isNull(state) && !isNull(zip)) ~> removeNullsFromCustomers",
						"removeDuplicatesFromCustomers alterRow(upsertIf(true())) ~> upsertCustomers",
						"loanPayments filter(!isNull(payment_id) && !isNull(loan_id) && !isNull(payment_date) && !isNull(payment_amount)) ~> removeNullFromLoanPayments",
						"removeNullFromLoanPayments aggregate(groupBy(payment_id),",
						"     each(match(name!='payment_id'), $$ = first($$))) ~> removeDuplicates",
						"removeDuplicates alterRow(upsertIf(true())) ~> upsertLoanpayments",
						"removeNullsFromAccounts aggregate(groupBy(account_id),",
						"     each(match(name!='account_id'), $$ = first($$))) ~> removeDuplictates",
						"removeNullsFromCustomers aggregate(groupBy(customer_id),",
						"     each(match(name!='customer_id'), $$ = first($$))) ~> removeDuplicatesFromCustomers",
						"loans filter(!isNull(loan_id) && !isNull(customer_id) && !isNull(loan_amount) && !isNull(interest_rate) && !isNull(loan_term)) ~> removeNullFromLoans",
						"removeNullFromLoans aggregate(groupBy(loan_id),",
						"     each(match(name!='loan_id'), $$ = first($$))) ~> removeDuplicatesFromLoans",
						"removeDuplicatesFromLoans alterRow(upsertIf(true())) ~> upsertLoans",
						"transactions filter(!isNull(transaction_id) && !isNull(account_id) && !isNull(transaction_date) && !isNull(transaction_amount) && !isNull(transaction_type)) ~> removeNullFromTransactions",
						"removeNullFromTransactions aggregate(groupBy(transaction_id),",
						"     each(match(name!='transaction_id'), $$ = first($$))) ~> removeDuplicateFromTransactions",
						"removeDuplicateFromTransactions alterRow(upsertIf(true())) ~> upsertTransactions",
						"upsertAccounts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'accounts',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['account_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkadlsSilverAccounts",
						"upsertCustomers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'customers',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['customer_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkaldsSilverCustomers",
						"upsertLoanpayments sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'loan_payments',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['payment_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkAdlsSilverLoanPayments",
						"upsertLoans sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'loans',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['loan_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkAdlsSilverLoans",
						"upsertTransactions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'transactions',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['transaction_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkAdlsSilverTransactions"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ncplbootcampyash')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_silver_to_gold')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "srcAccounts"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "targetAccounts"
						},
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "srcCustomers"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "targetCustomer"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "sinkAccountsTable"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "sinkAccoountsTableUpdate"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "sinkCustomerInsert"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "sinkCustomerUpdate"
						}
					],
					"transformations": [
						{
							"name": "renameColumns"
						},
						{
							"name": "addHashToAccounts"
						},
						{
							"name": "lookup"
						},
						{
							"name": "split"
						},
						{
							"name": "addAuditColumntoInsert"
						},
						{
							"name": "addAuditColumnToUpdaterows"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "renameColumnsCustomers"
						},
						{
							"name": "addHashCustomer"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "split1"
						},
						{
							"name": "addAuditCustomerInsert"
						},
						{
							"name": "addAuditCustomersUpdate"
						},
						{
							"name": "AlterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          account_id as integer,",
						"          customer_id as integer,",
						"          account_type as string,",
						"          balance as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'accounts') ~> srcAccounts",
						"source(output(",
						"          account_id as integer,",
						"          hashkey as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select account_id,hashkey\\nfrom project_01.accounts',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> targetAccounts",
						"source(output(",
						"          customer_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'customers') ~> srcCustomers",
						"source(output(",
						"          customer_id as integer,",
						"          hashkey as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select customer_id,hashkey \\nfrom project_01.customers',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> targetCustomer",
						"srcAccounts select(mapColumn(",
						"          each(match(1==1),",
						"               concat('src_',$$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> renameColumns",
						"renameColumns derive(src_hashkey = crc32(toString(src_account_id),toString(src_customer_id),src_account_type,toString(src_balance))) ~> addHashToAccounts",
						"addHashToAccounts, targetAccounts lookup(src_account_id == account_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup",
						"lookup split(isNull(account_id),",
						"     src_account_id == account_id && src_hashkey !=hashkey,",
						"     disjoint: false) ~> split@(insertrows, updaterows)",
						"split@insertrows derive(src_createddate = currentTimestamp(),",
						"          src_createdby = 'dataflow',",
						"          src_updatedtime = currentTimestamp(),",
						"          src_updatedby = 'dataflow') ~> addAuditColumntoInsert",
						"split@updaterows derive(src_updateddate = currentTimestamp(),",
						"          src_updatedby = 'dataflow-updated') ~> addAuditColumnToUpdaterows",
						"addAuditColumnToUpdaterows alterRow(updateIf(1==1)) ~> AlterRow1",
						"srcCustomers select(mapColumn(",
						"          each(match(1==1),",
						"               concat('src_',$$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> renameColumnsCustomers",
						"renameColumnsCustomers derive(src_hashkey = crc32(concat(toString(src_customer_id),src_first_name,src_last_name,src_address,src_city,src_zip))) ~> addHashCustomer",
						"addHashCustomer, targetCustomer lookup(src_customer_id == customer_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 split(isNull(customer_id),",
						"     src_customer_id==customer_id && src_hashkey!=hashkey,",
						"     disjoint: false) ~> split1@(insertRowsCustomers, updateRowsCustomers)",
						"split1@insertRowsCustomers derive(src_createddate = currentTimestamp(),",
						"          src_createdby = 'dataflow',",
						"          src_updateddate = currentTimestamp(),",
						"          src_updatedby = 'dataflow') ~> addAuditCustomerInsert",
						"split1@updateRowsCustomers derive(src_updatedby = 'dataflow-updated',",
						"          src_updateddate = currentTimestamp()) ~> addAuditCustomersUpdate",
						"addAuditCustomersUpdate alterRow(updateIf(1==1)) ~> AlterRow2",
						"addAuditColumntoInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          account_id as integer,",
						"          customer_id as integer,",
						"          account_type as string,",
						"          balance as double,",
						"          hashkey as long,",
						"          createddate as timestamp,",
						"          createdby as string,",
						"          updateddate as timestamp,",
						"          updatedby as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'project_01',",
						"     tableName: 'accounts',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          account_id = src_account_id,",
						"          customer_id = src_customer_id,",
						"          account_type = src_account_type,",
						"          balance = src_balance,",
						"          hashkey = src_hashkey,",
						"          account_id,",
						"          hashkey,",
						"          createddate = src_createddate,",
						"          createdby = src_createdby,",
						"          updateddate = src_updatedtime,",
						"          updatedby = src_updatedby",
						"     )) ~> sinkAccountsTable",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          account_id as integer,",
						"          customer_id as integer,",
						"          account_type as string,",
						"          balance as double,",
						"          hashkey as long,",
						"          createddate as timestamp,",
						"          createdby as string,",
						"          updateddate as timestamp,",
						"          updatedby as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'project_01',",
						"     tableName: 'accounts',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['account_id'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          account_id = src_account_id,",
						"          customer_id = src_customer_id,",
						"          account_type = src_account_type,",
						"          balance = src_balance,",
						"          hashkey = src_hashkey,",
						"          account_id,",
						"          hashkey,",
						"          updateddate = src_updateddate,",
						"          updatedby = src_updatedby",
						"     )) ~> sinkAccoountsTableUpdate",
						"addAuditCustomerInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip as string,",
						"          hashkey as long,",
						"          createddate as timestamp,",
						"          createdby as string,",
						"          updateddate as timestamp,",
						"          updatedby as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'project_01',",
						"     tableName: 'customers',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          customer_id = src_customer_id,",
						"          first_name = src_first_name,",
						"          last_name = src_last_name,",
						"          address = src_address,",
						"          city = src_city,",
						"          state = src_state,",
						"          zip = src_zip,",
						"          hashkey = src_hashkey,",
						"          createddate = src_createddate,",
						"          createdby = src_createdby,",
						"          updateddate = src_updateddate,",
						"          updatedby = src_updatedby",
						"     )) ~> sinkCustomerInsert",
						"AlterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip as string,",
						"          hashkey as long,",
						"          createddate as timestamp,",
						"          createdby as string,",
						"          updateddate as timestamp,",
						"          updatedby as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'project_01',",
						"     tableName: 'customers',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['customer_id'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          customer_id = src_customer_id,",
						"          first_name = src_first_name,",
						"          last_name = src_last_name,",
						"          address = src_address,",
						"          city = src_city,",
						"          state = src_state,",
						"          zip = src_zip,",
						"          hashkey = src_hashkey,",
						"          updatedby = src_updatedby,",
						"          updateddate = src_updateddate",
						"     )) ~> sinkCustomerUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ncplbootcampyash')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_server_db_azuresql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_silver_to_gold_scdtype2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "loanPayments"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "targetLoanPayments"
						},
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "loans"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "targetLoans"
						},
						{
							"linkedService": {
								"referenceName": "ls_ncplbootcampyash",
								"type": "LinkedServiceReference"
							},
							"name": "transactions"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "targetTransactions"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "sinkLoanPaymentsUpdate"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "sinkLoanPaymentsInsert"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "sinkUpdateRowsLoans"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "sinkInsertRowsLoans"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "sinkUpdateRowsTransactions"
						},
						{
							"linkedService": {
								"referenceName": "ls_server_db_azuresql",
								"type": "LinkedServiceReference"
							},
							"name": "sinkInsertRowsTransactions"
						}
					],
					"transformations": [
						{
							"name": "renameColumnsLoanPayments"
						},
						{
							"name": "addHashToLoanPayments"
						},
						{
							"name": "lookup"
						},
						{
							"name": "split1"
						},
						{
							"name": "addAuditUpdateLoanPayments"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "unionUpdateRowsToInsertLoanPayments"
						},
						{
							"name": "addAuditInsertLoanPayments"
						},
						{
							"name": "renameLoanColumns"
						},
						{
							"name": "addHashToLoans"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "split2"
						},
						{
							"name": "addAuditToUpdateRowsLoans"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "union1"
						},
						{
							"name": "addAuditToInsertRowsLoans"
						},
						{
							"name": "renameTransactionsColumns"
						},
						{
							"name": "addHashToTransactions"
						},
						{
							"name": "lookup2"
						},
						{
							"name": "split3"
						},
						{
							"name": "addAuditUpdaterowsTransactions"
						},
						{
							"name": "AlterRow3"
						},
						{
							"name": "union2"
						},
						{
							"name": "addAuditInsertRowsTransactions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          payment_id as integer,",
						"          loan_id as integer,",
						"          payment_date as date,",
						"          payment_amount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'loan_payments') ~> loanPayments",
						"source(output(",
						"          payment_id as integer,",
						"          hashkey as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select payment_id,hashkey from project_01.loanpayments \\nwhere isActive=1',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> targetLoanPayments",
						"source(output(",
						"          loan_id as integer,",
						"          customer_id as integer,",
						"          loan_amount as double,",
						"          interest_rate as double,",
						"          loan_term as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'loans') ~> loans",
						"source(output(",
						"          loan_id as integer,",
						"          hashkey as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select loan_id,hashkey\\nfrom project_01.loans\\nwhere isActive=1',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> targetLoans",
						"source(output(",
						"          transaction_id as integer,",
						"          account_id as integer,",
						"          transaction_date as date,",
						"          transaction_amount as double,",
						"          transaction_type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'transactions') ~> transactions",
						"source(output(",
						"          transaction_id as integer,",
						"          hashkey as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select transaction_id,hashkey\\nfrom project_01.transactions\\nwhere isActive=1',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> targetTransactions",
						"loanPayments select(mapColumn(",
						"          each(match(1==1),",
						"               concat('src_',$$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> renameColumnsLoanPayments",
						"renameColumnsLoanPayments derive(src_hashkey = crc32(concat(toString(src_payment_id),toString(src_loan_id),toString(src_payment_date),toString(src_payment_amount)))) ~> addHashToLoanPayments",
						"addHashToLoanPayments, targetLoanPayments lookup(src_payment_id == payment_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup",
						"lookup split(isNull(payment_id),",
						"     src_payment_id==payment_id && src_hashkey!=hashkey,",
						"     disjoint: false) ~> split1@(insertLoanPayments, updateLoanPayments)",
						"split1@updateLoanPayments derive(src_updatedby = 'dataflow-updated',",
						"          src_updateddate = currentTimestamp(),",
						"          src_isActive = 0) ~> addAuditUpdateLoanPayments",
						"addAuditUpdateLoanPayments alterRow(updateIf(1==1)) ~> AlterRow1",
						"split1@insertLoanPayments, split1@updateLoanPayments union(byName: true)~> unionUpdateRowsToInsertLoanPayments",
						"unionUpdateRowsToInsertLoanPayments derive(src_createddate = currentTimestamp(),",
						"          src_createdby = 'dataflow',",
						"          src_updateddate = currentTimestamp(),",
						"          src_updatedby = 'dataflow',",
						"          src_isActive = 1) ~> addAuditInsertLoanPayments",
						"loans select(mapColumn(",
						"          each(match(1==1),",
						"               concat('src_',$$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> renameLoanColumns",
						"renameLoanColumns derive(src_hashkey = crc32(concat(toString(src_loan_id),toString(src_customer_id),toString(src_loan_amount),toString(src_interest_rate),toString(src_loan_term)))) ~> addHashToLoans",
						"addHashToLoans, targetLoans lookup(src_loan_id == loan_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 split(isNull(loan_id),",
						"     src_loan_id==loan_id && src_hashkey!=hashkey,",
						"     disjoint: false) ~> split2@(insertRowsLoans, updateRowsLoans)",
						"split2@updateRowsLoans derive(src_updateddate = currentTimestamp(),",
						"          src_updatedby = 'dataflow-updated',",
						"          src_isActive = 0) ~> addAuditToUpdateRowsLoans",
						"addAuditToUpdateRowsLoans alterRow(updateIf(1==1)) ~> AlterRow2",
						"split2@insertRowsLoans, split2@updateRowsLoans union(byName: true)~> union1",
						"union1 derive(src_createddate = currentTimestamp(),",
						"          src_createdby = 'dataflow',",
						"          src_updateddate = currentTimestamp(),",
						"          src_updatedby = 'dataflow',",
						"          src_isActive = 1) ~> addAuditToInsertRowsLoans",
						"transactions select(mapColumn(",
						"          each(match(1==1),",
						"               concat('src_',$$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> renameTransactionsColumns",
						"renameTransactionsColumns derive(src_hashkey = crc32(concat(toString(src_transaction_id),toString(src_account_id),toString(src_transaction_date),toString(src_transaction_amount),src_transaction_type))) ~> addHashToTransactions",
						"addHashToTransactions, targetTransactions lookup(src_transaction_id == transaction_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup2",
						"lookup2 split(isNull(transaction_id),",
						"     src_transaction_id==transaction_id && src_hashkey !=hashkey,",
						"     disjoint: false) ~> split3@(insertRowsTransactions, updateRowsTransactions)",
						"split3@updateRowsTransactions derive(src_updateddate = currentTimestamp(),",
						"          src_updatedby = 'dataflow-updated',",
						"          src_isActive = 0) ~> addAuditUpdaterowsTransactions",
						"addAuditUpdaterowsTransactions alterRow(updateIf(1==1)) ~> AlterRow3",
						"split3@insertRowsTransactions, split3@updateRowsTransactions union(byName: true)~> union2",
						"union2 derive(src_createddate = currentTimestamp(),",
						"          src_createdby = 'dataflow',",
						"          src_updateddate = currentTimestamp(),",
						"          src_updatedby = 'dataflow',",
						"          src_isActive = 1) ~> addAuditInsertRowsTransactions",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          payment_id as integer,",
						"          loan_id as integer,",
						"          payment_date as timestamp,",
						"          payment_amount as double,",
						"          hashkey as long,",
						"          createddate as timestamp,",
						"          createdby as string,",
						"          updateddate as timestamp,",
						"          updatedby as string,",
						"          isActive as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'project_01',",
						"     tableName: 'loanpayments',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['payment_id','hashkey'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          payment_id,",
						"          hashkey,",
						"          updatedby = src_updatedby,",
						"          updateddate = src_updateddate,",
						"          isActive = src_isActive",
						"     )) ~> sinkLoanPaymentsUpdate",
						"addAuditInsertLoanPayments sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          payment_id as integer,",
						"          loan_id as integer,",
						"          payment_date as timestamp,",
						"          payment_amount as double,",
						"          hashkey as long,",
						"          createddate as timestamp,",
						"          createdby as string,",
						"          updateddate as timestamp,",
						"          updatedby as string,",
						"          isActive as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'project_01',",
						"     tableName: 'loanpayments',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          payment_id = src_payment_id,",
						"          loan_id = src_loan_id,",
						"          payment_date = src_payment_date,",
						"          payment_amount = src_payment_amount,",
						"          hashkey = src_hashkey,",
						"          createddate = src_createddate,",
						"          createdby = src_createdby,",
						"          updateddate = src_updateddate,",
						"          updatedby = src_updatedby,",
						"          isActive = src_isActive",
						"     )) ~> sinkLoanPaymentsInsert",
						"AlterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          loan_id as integer,",
						"          customer_id as integer,",
						"          loan_amount as double,",
						"          interest_rate as double,",
						"          loan_term as integer,",
						"          hashkey as long,",
						"          createddate as timestamp,",
						"          createdby as string,",
						"          updateddate as timestamp,",
						"          updatedby as string,",
						"          isActive as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'project_01',",
						"     tableName: 'loans',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['loan_id','hashkey'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          loan_id,",
						"          hashkey,",
						"          updateddate = src_updateddate,",
						"          updatedby = src_updatedby,",
						"          isActive = src_isActive",
						"     )) ~> sinkUpdateRowsLoans",
						"addAuditToInsertRowsLoans sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          loan_id as integer,",
						"          customer_id as integer,",
						"          loan_amount as double,",
						"          interest_rate as double,",
						"          loan_term as integer,",
						"          hashkey as long,",
						"          createddate as timestamp,",
						"          createdby as string,",
						"          updateddate as timestamp,",
						"          updatedby as string,",
						"          isActive as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'project_01',",
						"     tableName: 'loans',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          loan_id = src_loan_id,",
						"          customer_id = src_customer_id,",
						"          loan_amount = src_loan_amount,",
						"          interest_rate = src_interest_rate,",
						"          loan_term = src_loan_term,",
						"          hashkey = src_hashkey,",
						"          createddate = src_createddate,",
						"          createdby = src_createdby,",
						"          updateddate = src_updateddate,",
						"          updatedby = src_updatedby,",
						"          isActive = src_isActive",
						"     )) ~> sinkInsertRowsLoans",
						"AlterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          transaction_id as integer,",
						"          account_id as integer,",
						"          transaction_date as timestamp,",
						"          transaction_amount as double,",
						"          transaction_type as string,",
						"          hashkey as long,",
						"          createdby as string,",
						"          createddate as timestamp,",
						"          updatedby as string,",
						"          updateddate as timestamp,",
						"          isActive as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'project_01',",
						"     tableName: 'transactions',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['transaction_id','hashkey'],",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          transaction_id,",
						"          hashkey,",
						"          updateddate = src_updateddate,",
						"          updatedby = src_updatedby,",
						"          isActive = src_isActive",
						"     )) ~> sinkUpdateRowsTransactions",
						"addAuditInsertRowsTransactions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          transaction_id as integer,",
						"          account_id as integer,",
						"          transaction_date as timestamp,",
						"          transaction_amount as double,",
						"          transaction_type as string,",
						"          hashkey as long,",
						"          createdby as string,",
						"          createddate as timestamp,",
						"          updatedby as string,",
						"          updateddate as timestamp,",
						"          isActive as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'project_01',",
						"     tableName: 'transactions',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     stagingSchemaName: '',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          transaction_id = src_transaction_id,",
						"          account_id = src_account_id,",
						"          transaction_date = src_transaction_date,",
						"          transaction_amount = src_transaction_amount,",
						"          transaction_type = src_transaction_type,",
						"          hashkey = src_hashkey,",
						"          createddate = src_createddate,",
						"          createdby = src_createdby,",
						"          updateddate = src_updateddate,",
						"          updatedby = src_updatedby,",
						"          isActive = src_isActive",
						"     )) ~> sinkInsertRowsTransactions"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ncplbootcampyash')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_server_db_azuresql')]"
			]
		}
	]
}